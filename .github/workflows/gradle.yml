# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    paths: [ 'server/**' ]
    branches: [ 'main' ]

permissions:
  contents: read

env:
  S3_BUCKET_NAME: 17farm-codedeploy-app
  RESOURCE_PATH: ./server/src/main/resources/application-server.yml

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: ./server/

      # Access Key와 Secret Access Key를 통해 권한을 확인합니다.
      # 아래 코드에 Access Key와 Secret Key를 직접 작성하지 않습니다.
      - name: Set Yaml
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }}
        env:
          spring.datasource.password: ${{ secrets.RDS_PASSWORD }}
          spring.security.oauth2.client.registration.kakao.adminKey: ${{ secrets.KAKAO_ADMINKEY}}
          spring.security.oauth2.client.registration.kakao.clientId: ${{ secrets.KAKAO_CLIENTID}}
          spring.security.oauth2.client.registration.kakao.clientSecret: ${{ secrets.KAKAO_CLIENTSECRET}}
          jwt.secret-key: ${{ secrets.JWT_SECRET_KEY}}
          AdminMail.id : ${{ secrets.ADMINMAIL_ID}}
          AdminMail.password : ${{ secrets.ADMINMAIL_PASSWORD}}
          cloud.aws.credentials.access-key: ${{ secrets.AWS_ACCESS_KEY }}
          cloud.aws.credentials.secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


      - name: Build with Gradle
        run: ./gradlew build
        working-directory: ./server/
      # build한 후 프로젝트를 압축합니다.

      - name: Make zip file
        run: zip -r ./main-017-deploy.zip .
        shell: bash

      # Access Key와 Secret Access Key를 통해 권한을 확인합니다.
      # 아래 코드에 Access Key와 Secret Key를 직접 작성하지 않습니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
          aws-region: ap-northeast-2


      # 압축한 프로젝트를 S3로 전송합니다.
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./main-017-deploy.zip s3://$S3_BUCKET_NAME/main-017-deploy.zip
        # CodeDeploy에게 배포 명령을 내립니다.
      - name: Code Deploy
        run: >
          aws deploy create-deployment --application-name 17farm-codedeploy-app
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name 17farm-group
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=main-017-deploy.zip
